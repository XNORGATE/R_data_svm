message(sprintf('Saving %s as %s.csv', obj,obj) )
write.csv(.x, file = paste0(obj, '.csv'))
}
}
resave('iris-svm.RData')
load("C:/Users/Dean/Desktop/CLanguage/big_data/final_project/anime.RData")
Sepal.W= "(2009-2010)"
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = "Fullmetal Alchemist: Brotherhood"
Sepal.W= "(2009-2010)"
Petal.L = "24 min"
Petal.W= "Animation, Action, Adventure"
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("randomForest",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
load("C:/Users/Dean/Desktop/CLanguage/big_data/final_project/anime.RData")
library("randomForest",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = "Fullmetal Alchemist: Brotherhood"
Sepal.W= "(2009-2010)"
Petal.L = "24 min"
Petal.W= "Animation, Action, Adventure"
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("randomForest",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
data <- read.csv("housing_price_dataset.csv")
# # save(svm.model,file="C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\big\\anime.RData")
data <- read.csv("housing_price_dataset.csv")
# # save(svm.model,file="C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\big\\anime.RData")
data <- read.csv("C:\Users\Dean\Desktop\CLanguage\big_data\final_project\housing_price_dataset.csv")
# # save(svm.model,file="C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\big\\anime.RData")
data <- read.csv("C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\final_project\\housing_price_dataset.csv")
# rm(list = ls())
# gc()
# # #install.packages("randomForest")
# library(randomForest)
# data(iris)
# ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.8, 0.2))
# trainData <- iris[ind==1,]
# trainData <- iris[ind==1,]
# rf <- randomForest(Species ~ ., data=trainData, ntree=100)
# irisPred = predict(rf, newdata=testData)
# table(irisPred, testData$Species)
# # #install.packages("e1071")
# # library(e1071)
# # data(iris)
# # test.index = sample(1:nrow(iris),15)
# # test.data = iris[test.index,]
# # train.data = iris[-test.index,]
# # tuned <- tune.svm(Species ~., data = train.data, gamma = 10^(-3:-1), cost = 10^(-1:1))
# # summary(tuned)
# # svm.model <- svm(Species ~ ., data = train.data, type='C-classification', cost = 1, gamma = 0.1)
# # summary(svm.model)
# # svm.pred <- predict(svm.model, test.data[,-5])
# # (table.svm.test=table(pred = svm.pred, true = test.data[,5]))
# # correct.svm <- sum(diag(table.svm.test))/sum(table.svm.test)
# # (correct.svm<-correct.svm*100)
# # save(svm.model,file="C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\big\\anime.RData")
data <- read.csv("C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\final_project\\housing_price_dataset.csv")
save(data, file = "price.RData")
load("C:/Users/Dean/Desktop/CLanguage/big_data/final_project/price.RData")
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("iris-svm.RData", .GlobalEnv)
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("iris-svm.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("iris-svm.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("iris-svm.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("anime.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
# #install.packages("e1071")
# library(e1071)
# data(iris)
# test.index = sample(1:nrow(iris),15)
# test.data = iris[test.index,]
# train.data = iris[-test.index,]
# tuned <- tune.svm(Species ~., data = train.data, gamma = 10^(-3:-1), cost = 10^(-1:1))
# summary(tuned)
# svm.model <- svm(Species ~ ., data = train.data, type='C-classification', cost = 1, gamma = 0.1)
# summary(svm.model)
# svm.pred <- predict(svm.model, test.data[,-5])
# (table.svm.test=table(pred = svm.pred, true = test.data[,5]))
# correct.svm <- sum(diag(table.svm.test))/sum(table.svm.test)
# (correct.svm<-correct.svm*100)
# save(svm.model,file="C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\big\\anime.RData")
# #install.packages("e1071")
# library(e1071)
# data(iris)
# test.index = sample(1:nrow(iris),15)
# test.data = iris[test.index,]
# train.data = iris[-test.index,]
# tuned <- tune.svm(Species ~., data = train.data, gamma = 10^(-3:-1), cost = 10^(-1:1))
# summary(tuned)
# svm.model <- svm(Species ~ ., data = train.data, type='C-classification', cost = 1, gamma = 0.1)
# summary(svm.model)
# svm.pred <- predict(svm.model, test.data[,-5])
# (table.svm.test=table(pred = svm.pred, true = test.data[,5]))
# correct.svm <- sum(diag(table.svm.test))/sum(table.svm.test)
# (correct.svm<-correct.svm*100)
# save(svm.model,file="C:\\Users\\Dean\\Desktop\\CLanguage\\big_data\\big\\anime.RData")
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("iris-svm.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
ans <- as.vector(svm.pred)
print(ans)
print(Sepal.L)
print(Sepal.W)
print(Petal.L)
print(Petal.W)
dev.off()
# args = commandArgs(TRUE)
# Sepal.L = as.numeric(args[1])
# Sepal.W = as.numeric(args[2])
# Petal.L = as.numeric(args[3])
# Petal.W = as.numeric(args[4])
Sepal.L = 5.9
Sepal.W= 3.0
Petal.L = 5.1
Petal.W= 1.8
# library("httr",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("curl",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
# library("rjson",lib.loc= "C:/Users/user/AppData/Local/R/win-library/4.2")
#library("httr",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("curl",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
#library("rjson",lib.loc= "C:/Users/q/AppData/Local/R/win-library/4.2")
library("e1071",lib.loc= "C:/Users/Dean/AppData/Local/R/win-library/4.3")
load("price.RData", .GlobalEnv)
flower <-data.frame(Sepal.Length=Sepal.L,Sepal.Width=Sepal.W,Petal.Length=Petal.L,Petal.Width=Petal.W,Species=NA)
svm.pred <- predict(svm.model, flower[,-5])
#install.packages("e1071")
library(e1071)
data(script)
test.index = sample(1:nrow(script),15)
data <- read.csv("stress.csv")
save(data, file = "stress.RData")
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Replace with the correct path to your stress.RData file
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
# Load necessary library
library(e1071)
# Load the stress dataset
load("./stress.RData")  # Replace with the correct path to your stress.RData file
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
# Load necessary library
library(e1071)
# Load the stress dataset
load("C:\\Users\\tsaid\\R_data_svm\\stress.RData")  # Replace with the correct path to your stress.RData file
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Replace with the correct path to your stress.RData file
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Replace with the correct path to your stress.RData file
print(exists("stress"))
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Replace with the correct path to your stress.RData file
print(file.exists("stress.RData"))
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Replace with the correct path to your stress.RData file
stress <- read.csv("stress.csv")
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
test.data = stress[test.index,]
train.data = stress[-test.index,]
# Tune parameters for SVM
# Replace 'target ~ .' with your actual target variable and features
tuned <- tune.svm(TargetVariable ~ ., data = train.data, gamma = 10^(-3:-1), cost = 10^(-1:1))
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Replace with the correct path to your stress.RData file
stress <- read.csv("stress.csv")
# Assuming 'stress' is the dataframe loaded from stress.RData
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
test.data = stress[test.index,]
train.data = stress[-test.index,]
# Tune parameters for SVM
# Replace 'target ~ .' with your actual target variable and features
# Replace 'TargetVariable' with the actual name of the target variable from your dataset
tuned <- tune.svm(`How would you rate your stress levels?` ~ ., data = train.data, gamma = 10^(-3:-1), cost = 10^(-1:1))
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Make sure this path is correct
# If you're loading from a CSV file instead of an RData file
# stress <- read.csv("path/to/stress.csv")
# Rename the target variable for ease of use
# Replace 'YourTargetColumnName' with the actual name of your target column
names(stress)[names(stress) == 'YourTargetColumnName'] <- 'StressLevel'
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
test.data = stress[test.index,]
train.data = stress[-test.index,]
# Tune parameters for SVM using the renamed target variable
tuned <- tune.svm(StressLevel ~ ., data = train.data, gamma = 10^(-3:-1), cost = 10^(-1:1))
# Load necessary library
library(e1071)
# Load the stress dataset
load("stress.RData")  # Make sure this path is correct
# Rename the target variable for ease of use
names(stress)[names(stress) == "How would you rate your stress levels?"] <- "StressLevel"
# Split the data into training and test sets
set.seed(123)  # Setting seed for reproducibility
test.index = sample(1:nrow(stress), round(0.2 * nrow(stress)))  # 20% data as test set
test.data = stress[test.index,]
train.data = stress[-test.index,]
# Tune parameters for SVM using the renamed target variable
tuned <- tune.svm(StressLevel ~ ., data = train.data, gamma = 10^(-3:-1), cost = 10^(-1:1))
